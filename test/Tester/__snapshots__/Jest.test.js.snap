// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Jest executor should return valid Jest configuration in JSDOM 1`] = `
"const SOURCE_MODULES = ['/example/repositories/FirstRep/source','/example/repositories/SecondRep/source'];
const BUILD_MODULES = ['/example/application/First','/example/application/Second'];

function resolvePath(src, dst, pathSnapshot) {
   const path = pathSnapshot.replace(/\\\\\\\\/gi, '/');

   for (let index = 0; index < src.length; ++index) {
      if (path.startsWith(src[index])) {
         return dst[index] + path.slice(src[index].length);
      }
   }

   return path;
}

// Resolve snapshot file.
// Example:
//    Input:   dist/src/__test__/Post.spec.js
//    Output:  src/__test__/__snapshot__/Post.spec.ts.snap
// @param {string} testPath Test file path.
// @param {string} snapshotExtension Snapshot extension to be used (default is .snap)
function resolveSnapshotPath(testPath, snapshotExtension) {
   return resolvePath(BUILD_MODULES, SOURCE_MODULES, testPath) + snapshotExtension;
}

// Resolve test file path.
// Example:
//    Input:   src/__test__/__snapshot__/Post.spec.ts.snap
//    Output:  dist/src/__test__/Post.spec.js
// @param {string} snapshotFilePath Snapshot file path.
// @param {string} snapshotExtension Snapshot extension to be used (default is .snap)
function resolveTestPath(snapshotFilePath, snapshotExtension) {
   return resolvePath(SOURCE_MODULES, BUILD_MODULES, snapshotFilePath).slice(0, -snapshotExtension.length);
}

// resolveTestPath(resolveSnapshotPath(testPathForConsistencyCheck)) === testPathForConsistencyCheck
const testPathForConsistencyCheck = '/example/application/First/Component/index.js';

module.exports = {
   resolveSnapshotPath: resolveSnapshotPath,
   resolveTestPath: resolveTestPath,
   testPathForConsistencyCheck: testPathForConsistencyCheck
};
"
`;

exports[`Jest executor should return valid Jest configuration in JSDOM 2`] = `
Object {
  "collectCoverage": false,
  "collectCoverageFrom": Array [
    "**/*.{js,jsx}",
    "!**/node_modules/**",
    "!**/third-party/**",
  ],
  "coverageDirectory": "/example/results/JestUnitTests/JSDOM/coverage",
  "coverageReporters": Array [
    Array [
      "html",
      Object {
        "subdir": "coverage",
      },
    ],
  ],
  "maxWorkers": "50%",
  "projects": Array [
    Object {
      "automock": false,
      "cacheDirectory": "/example/results/cache/jest",
      "clearMocks": false,
      "displayName": "First_NodeJS",
      "errorOnDeprecated": false,
      "globals": Object {
        "__SABY_APPLICATION_DIRECTORY__": "/example/application",
        "__SABY_LOAD_CSS__": false,
      },
      "moduleDirectories": Array [
        "node_modules",
        "/example/application",
      ],
      "moduleNameMapper": Object {
        "react-dom": "/example/application/React/third-party/react-dom/react-dom.development.js",
        "react-dom/server": "/example/application/React/third-party/react-dom/server/react-dom-server.browser.development.js",
        "react-dom/test-utils": "/example/application/React/third-party/react-dom/test-utils/react-dom-test-utils.development.js",
      },
      "resetMocks": false,
      "resetModules": false,
      "restoreMocks": true,
      "rootDir": "/example/application",
      "roots": Array [
        "/example/application/First",
      ],
      "setupFilesAfterEnv": Array [
        "/example/node_modules/saby-units/lib/jest/setup-umd.js",
      ],
      "slowTestThreshold": 5,
      "snapshotResolver": "/example/results/JestUnitTests/JSDOM/snapshot-resolver.js",
      "testEnvironment": "node",
      "testEnvironmentOptions": Object {
        "contentType": "text/html",
        "includeNodeLocations": true,
        "pretendToBeVisual": true,
        "resources": "usable",
        "runScripts": "dangerously",
        "storageQuota": 10000000,
      },
      "testMatch": Array [
        "**/*.test.js",
      ],
      "testRunner": "/example/node_modules/saby-units/lib/jest/testRunner.js",
      "transform": Object {},
    },
    Object {
      "automock": false,
      "cacheDirectory": "/example/results/cache/jest",
      "clearMocks": false,
      "displayName": "Second_JSDOM",
      "errorOnDeprecated": false,
      "globals": Object {
        "__SABY_APPLICATION_DIRECTORY__": "/example/application",
        "__SABY_LOAD_CSS__": true,
      },
      "moduleDirectories": Array [
        "node_modules",
        "/example/application",
      ],
      "moduleNameMapper": Object {
        "react-dom": "/example/application/React/third-party/react-dom/react-dom.development.js",
        "react-dom/server": "/example/application/React/third-party/react-dom/server/react-dom-server.browser.development.js",
        "react-dom/test-utils": "/example/application/React/third-party/react-dom/test-utils/react-dom-test-utils.development.js",
      },
      "resetMocks": false,
      "resetModules": false,
      "restoreMocks": true,
      "rootDir": "/example/application",
      "roots": Array [
        "/example/application/Second",
      ],
      "setupFilesAfterEnv": Array [
        "/example/node_modules/saby-units/lib/jest/setup-umd.js",
      ],
      "slowTestThreshold": 5,
      "snapshotResolver": "/example/results/JestUnitTests/JSDOM/snapshot-resolver.js",
      "testEnvironment": "jsdom",
      "testEnvironmentOptions": Object {
        "contentType": "text/html",
        "includeNodeLocations": true,
        "pretendToBeVisual": true,
        "resources": "usable",
        "runScripts": "dangerously",
        "storageQuota": 10000000,
      },
      "testMatch": Array [
        "**/*.test.js",
      ],
      "testRunner": "/example/node_modules/saby-units/lib/jest/testRunner.js",
      "transform": Object {},
    },
  ],
  "reporters": Array [
    "default",
  ],
  "testFailureExitCode": 1,
  "testTimeout": 6000,
}
`;

exports[`Jest executor should return valid Jest configuration in JSDOM 3`] = `
Object {
  "envVariables": Object {},
  "jest": Object {
    "configPath": "/example/results/JestUnitTests/JSDOM/jestConfig.json",
    "junitEnabled": false,
    "options": Object {
      "ci": true,
      "report": "console",
      "updateSnapshot": undefined,
    },
    "root": "/example/application",
  },
}
`;

exports[`Jest executor should return valid Jest configuration in Jenkins in JSDOM 1`] = `
"const SOURCE_MODULES = ['/example/repositories/FirstRep/source','/example/repositories/SecondRep/source'];
const BUILD_MODULES = ['/example/application/First','/example/application/Second'];

function resolvePath(src, dst, pathSnapshot) {
   const path = pathSnapshot.replace(/\\\\\\\\/gi, '/');

   for (let index = 0; index < src.length; ++index) {
      if (path.startsWith(src[index])) {
         return dst[index] + path.slice(src[index].length);
      }
   }

   return path;
}

// Resolve snapshot file.
// Example:
//    Input:   dist/src/__test__/Post.spec.js
//    Output:  src/__test__/__snapshot__/Post.spec.ts.snap
// @param {string} testPath Test file path.
// @param {string} snapshotExtension Snapshot extension to be used (default is .snap)
function resolveSnapshotPath(testPath, snapshotExtension) {
   return resolvePath(BUILD_MODULES, SOURCE_MODULES, testPath) + snapshotExtension;
}

// Resolve test file path.
// Example:
//    Input:   src/__test__/__snapshot__/Post.spec.ts.snap
//    Output:  dist/src/__test__/Post.spec.js
// @param {string} snapshotFilePath Snapshot file path.
// @param {string} snapshotExtension Snapshot extension to be used (default is .snap)
function resolveTestPath(snapshotFilePath, snapshotExtension) {
   return resolvePath(SOURCE_MODULES, BUILD_MODULES, snapshotFilePath).slice(0, -snapshotExtension.length);
}

// resolveTestPath(resolveSnapshotPath(testPathForConsistencyCheck)) === testPathForConsistencyCheck
const testPathForConsistencyCheck = '/example/application/First/Component/index.js';

module.exports = {
   resolveSnapshotPath: resolveSnapshotPath,
   resolveTestPath: resolveTestPath,
   testPathForConsistencyCheck: testPathForConsistencyCheck
};
"
`;

exports[`Jest executor should return valid Jest configuration in Jenkins in JSDOM 2`] = `
Object {
  "collectCoverage": false,
  "collectCoverageFrom": Array [
    "**/*.{js,jsx}",
    "!**/node_modules/**",
    "!**/third-party/**",
  ],
  "coverageDirectory": "/example/results/JestUnitTests/JSDOM/coverage",
  "coverageReporters": Array [
    Array [
      "html",
      Object {
        "subdir": "coverage",
      },
    ],
  ],
  "maxWorkers": "20%",
  "projects": Array [
    Object {
      "automock": false,
      "cacheDirectory": "/example/results/cache/jest",
      "clearMocks": false,
      "displayName": "First_NodeJS",
      "errorOnDeprecated": false,
      "globals": Object {
        "__SABY_APPLICATION_DIRECTORY__": "/example/application",
        "__SABY_LOAD_CSS__": false,
      },
      "moduleDirectories": Array [
        "node_modules",
        "/example/application",
      ],
      "moduleNameMapper": Object {
        "react-dom": "/example/application/React/third-party/react-dom/react-dom.development.js",
        "react-dom/server": "/example/application/React/third-party/react-dom/server/react-dom-server.browser.development.js",
        "react-dom/test-utils": "/example/application/React/third-party/react-dom/test-utils/react-dom-test-utils.development.js",
      },
      "resetMocks": false,
      "resetModules": false,
      "restoreMocks": true,
      "rootDir": "/example/application",
      "roots": Array [
        "/example/application/First",
      ],
      "setupFilesAfterEnv": Array [
        "/example/node_modules/saby-units/lib/jest/setup-umd.js",
      ],
      "slowTestThreshold": 5,
      "snapshotResolver": "/example/results/JestUnitTests/JSDOM/snapshot-resolver.js",
      "testEnvironment": "node",
      "testEnvironmentOptions": Object {
        "contentType": "text/html",
        "includeNodeLocations": true,
        "pretendToBeVisual": true,
        "resources": "usable",
        "runScripts": "dangerously",
        "storageQuota": 10000000,
      },
      "testMatch": Array [
        "**/*.test.js",
      ],
      "testRunner": "/example/node_modules/saby-units/lib/jest/testRunner.js",
      "transform": Object {},
    },
    Object {
      "automock": false,
      "cacheDirectory": "/example/results/cache/jest",
      "clearMocks": false,
      "displayName": "Second_JSDOM",
      "errorOnDeprecated": false,
      "globals": Object {
        "__SABY_APPLICATION_DIRECTORY__": "/example/application",
        "__SABY_LOAD_CSS__": true,
      },
      "moduleDirectories": Array [
        "node_modules",
        "/example/application",
      ],
      "moduleNameMapper": Object {
        "react-dom": "/example/application/React/third-party/react-dom/react-dom.development.js",
        "react-dom/server": "/example/application/React/third-party/react-dom/server/react-dom-server.browser.development.js",
        "react-dom/test-utils": "/example/application/React/third-party/react-dom/test-utils/react-dom-test-utils.development.js",
      },
      "resetMocks": false,
      "resetModules": false,
      "restoreMocks": true,
      "rootDir": "/example/application",
      "roots": Array [
        "/example/application/Second",
      ],
      "setupFilesAfterEnv": Array [
        "/example/node_modules/saby-units/lib/jest/setup-umd.js",
      ],
      "slowTestThreshold": 5,
      "snapshotResolver": "/example/results/JestUnitTests/JSDOM/snapshot-resolver.js",
      "testEnvironment": "jsdom",
      "testEnvironmentOptions": Object {
        "contentType": "text/html",
        "includeNodeLocations": true,
        "pretendToBeVisual": true,
        "resources": "usable",
        "runScripts": "dangerously",
        "storageQuota": 10000000,
      },
      "testMatch": Array [
        "**/*.test.js",
      ],
      "testRunner": "/example/node_modules/saby-units/lib/jest/testRunner.js",
      "transform": Object {},
    },
  ],
  "reporters": Array [
    "default",
    Array [
      "/example/node_modules/saby-units/lib/jest/reporter.js",
      Object {
        "ancestorSeparator": " › ",
        "classNameTemplate": ".{classname}",
        "includeConsoleOutput": "true",
        "outputFile": "/example/results/JestUnitTests/JSDOM/result/xunit-report.xml",
        "suiteName": "Jest Unit Tests",
        "suiteNameTemplate": " › {filepath}",
        "titleTemplate": "{title}",
      },
    ],
  ],
  "testFailureExitCode": 1,
  "testTimeout": 6000,
}
`;

exports[`Jest executor should return valid Jest configuration in Jenkins in JSDOM 3`] = `
Object {
  "envVariables": Object {},
  "jest": Object {
    "configPath": "/example/results/JestUnitTests/JSDOM/jestConfig.json",
    "junitEnabled": true,
    "options": Object {
      "ci": true,
      "parallelBrowserTest": "3",
      "parallelNodeTest": "7",
      "report": "xml",
      "timeoutTests": "120000",
      "updateSnapshot": undefined,
    },
    "root": "/example/application",
  },
}
`;

exports[`Jest executor should return valid Jest configuration in Jenkins in NodeJS 1`] = `
"const SOURCE_MODULES = ['/example/repositories/FirstRep/source','/example/repositories/SecondRep/source'];
const BUILD_MODULES = ['/example/application/First','/example/application/Second'];

function resolvePath(src, dst, pathSnapshot) {
   const path = pathSnapshot.replace(/\\\\\\\\/gi, '/');

   for (let index = 0; index < src.length; ++index) {
      if (path.startsWith(src[index])) {
         return dst[index] + path.slice(src[index].length);
      }
   }

   return path;
}

// Resolve snapshot file.
// Example:
//    Input:   dist/src/__test__/Post.spec.js
//    Output:  src/__test__/__snapshot__/Post.spec.ts.snap
// @param {string} testPath Test file path.
// @param {string} snapshotExtension Snapshot extension to be used (default is .snap)
function resolveSnapshotPath(testPath, snapshotExtension) {
   return resolvePath(BUILD_MODULES, SOURCE_MODULES, testPath) + snapshotExtension;
}

// Resolve test file path.
// Example:
//    Input:   src/__test__/__snapshot__/Post.spec.ts.snap
//    Output:  dist/src/__test__/Post.spec.js
// @param {string} snapshotFilePath Snapshot file path.
// @param {string} snapshotExtension Snapshot extension to be used (default is .snap)
function resolveTestPath(snapshotFilePath, snapshotExtension) {
   return resolvePath(SOURCE_MODULES, BUILD_MODULES, snapshotFilePath).slice(0, -snapshotExtension.length);
}

// resolveTestPath(resolveSnapshotPath(testPathForConsistencyCheck)) === testPathForConsistencyCheck
const testPathForConsistencyCheck = '/example/application/First/Component/index.js';

module.exports = {
   resolveSnapshotPath: resolveSnapshotPath,
   resolveTestPath: resolveTestPath,
   testPathForConsistencyCheck: testPathForConsistencyCheck
};
"
`;

exports[`Jest executor should return valid Jest configuration in Jenkins in NodeJS 2`] = `
Object {
  "collectCoverage": false,
  "collectCoverageFrom": Array [
    "**/*.{js,jsx}",
    "!**/node_modules/**",
    "!**/third-party/**",
  ],
  "coverageDirectory": "/example/results/JestUnitTests/NodeJS/coverage",
  "coverageReporters": Array [
    Array [
      "html",
      Object {
        "subdir": "coverage",
      },
    ],
  ],
  "maxWorkers": "20%",
  "projects": Array [
    Object {
      "automock": false,
      "cacheDirectory": "/example/results/cache/jest",
      "clearMocks": false,
      "displayName": "First_NodeJS",
      "errorOnDeprecated": false,
      "globals": Object {
        "__SABY_APPLICATION_DIRECTORY__": "/example/application",
        "__SABY_LOAD_CSS__": false,
      },
      "moduleDirectories": Array [
        "node_modules",
        "/example/application",
      ],
      "moduleNameMapper": Object {
        "react-dom": "/example/application/React/third-party/react-dom/react-dom.development.js",
        "react-dom/server": "/example/application/React/third-party/react-dom/server/react-dom-server.browser.development.js",
        "react-dom/test-utils": "/example/application/React/third-party/react-dom/test-utils/react-dom-test-utils.development.js",
      },
      "resetMocks": false,
      "resetModules": false,
      "restoreMocks": true,
      "rootDir": "/example/application",
      "roots": Array [
        "/example/application/First",
      ],
      "setupFilesAfterEnv": Array [
        "/example/node_modules/saby-units/lib/jest/setup-umd.js",
      ],
      "slowTestThreshold": 5,
      "snapshotResolver": "/example/results/JestUnitTests/NodeJS/snapshot-resolver.js",
      "testEnvironment": "node",
      "testEnvironmentOptions": Object {
        "contentType": "text/html",
        "includeNodeLocations": true,
        "pretendToBeVisual": true,
        "resources": "usable",
        "runScripts": "dangerously",
        "storageQuota": 10000000,
      },
      "testMatch": Array [
        "**/*.test.js",
      ],
      "testRunner": "/example/node_modules/saby-units/lib/jest/testRunner.js",
      "transform": Object {},
    },
    Object {
      "automock": false,
      "cacheDirectory": "/example/results/cache/jest",
      "clearMocks": false,
      "displayName": "Second_JSDOM",
      "errorOnDeprecated": false,
      "globals": Object {
        "__SABY_APPLICATION_DIRECTORY__": "/example/application",
        "__SABY_LOAD_CSS__": true,
      },
      "moduleDirectories": Array [
        "node_modules",
        "/example/application",
      ],
      "moduleNameMapper": Object {
        "react-dom": "/example/application/React/third-party/react-dom/react-dom.development.js",
        "react-dom/server": "/example/application/React/third-party/react-dom/server/react-dom-server.browser.development.js",
        "react-dom/test-utils": "/example/application/React/third-party/react-dom/test-utils/react-dom-test-utils.development.js",
      },
      "resetMocks": false,
      "resetModules": false,
      "restoreMocks": true,
      "rootDir": "/example/application",
      "roots": Array [
        "/example/application/Second",
      ],
      "setupFilesAfterEnv": Array [
        "/example/node_modules/saby-units/lib/jest/setup-umd.js",
      ],
      "slowTestThreshold": 5,
      "snapshotResolver": "/example/results/JestUnitTests/NodeJS/snapshot-resolver.js",
      "testEnvironment": "jsdom",
      "testEnvironmentOptions": Object {
        "contentType": "text/html",
        "includeNodeLocations": true,
        "pretendToBeVisual": true,
        "resources": "usable",
        "runScripts": "dangerously",
        "storageQuota": 10000000,
      },
      "testMatch": Array [
        "**/*.test.js",
      ],
      "testRunner": "/example/node_modules/saby-units/lib/jest/testRunner.js",
      "transform": Object {},
    },
  ],
  "reporters": Array [
    "default",
    Array [
      "/example/node_modules/saby-units/lib/jest/reporter.js",
      Object {
        "ancestorSeparator": " › ",
        "classNameTemplate": ".{classname}",
        "includeConsoleOutput": "true",
        "outputFile": "/example/results/JestUnitTests/NodeJS/result/xunit-report.xml",
        "suiteName": "Jest Unit Tests",
        "suiteNameTemplate": " › {filepath}",
        "titleTemplate": "{title}",
      },
    ],
  ],
  "testFailureExitCode": 1,
  "testTimeout": 6000,
}
`;

exports[`Jest executor should return valid Jest configuration in Jenkins in NodeJS 3`] = `
Object {
  "envVariables": Object {},
  "jest": Object {
    "configPath": "/example/results/JestUnitTests/NodeJS/jestConfig.json",
    "junitEnabled": true,
    "options": Object {
      "ci": true,
      "parallelBrowserTest": "3",
      "parallelNodeTest": "7",
      "report": "xml",
      "timeoutTests": "120000",
      "updateSnapshot": undefined,
    },
    "root": "/example/application",
  },
}
`;

exports[`Jest executor should return valid Jest configuration in NodeJS 1`] = `
"const SOURCE_MODULES = ['/example/repositories/FirstRep/source','/example/repositories/SecondRep/source'];
const BUILD_MODULES = ['/example/application/First','/example/application/Second'];

function resolvePath(src, dst, pathSnapshot) {
   const path = pathSnapshot.replace(/\\\\\\\\/gi, '/');

   for (let index = 0; index < src.length; ++index) {
      if (path.startsWith(src[index])) {
         return dst[index] + path.slice(src[index].length);
      }
   }

   return path;
}

// Resolve snapshot file.
// Example:
//    Input:   dist/src/__test__/Post.spec.js
//    Output:  src/__test__/__snapshot__/Post.spec.ts.snap
// @param {string} testPath Test file path.
// @param {string} snapshotExtension Snapshot extension to be used (default is .snap)
function resolveSnapshotPath(testPath, snapshotExtension) {
   return resolvePath(BUILD_MODULES, SOURCE_MODULES, testPath) + snapshotExtension;
}

// Resolve test file path.
// Example:
//    Input:   src/__test__/__snapshot__/Post.spec.ts.snap
//    Output:  dist/src/__test__/Post.spec.js
// @param {string} snapshotFilePath Snapshot file path.
// @param {string} snapshotExtension Snapshot extension to be used (default is .snap)
function resolveTestPath(snapshotFilePath, snapshotExtension) {
   return resolvePath(SOURCE_MODULES, BUILD_MODULES, snapshotFilePath).slice(0, -snapshotExtension.length);
}

// resolveTestPath(resolveSnapshotPath(testPathForConsistencyCheck)) === testPathForConsistencyCheck
const testPathForConsistencyCheck = '/example/application/First/Component/index.js';

module.exports = {
   resolveSnapshotPath: resolveSnapshotPath,
   resolveTestPath: resolveTestPath,
   testPathForConsistencyCheck: testPathForConsistencyCheck
};
"
`;

exports[`Jest executor should return valid Jest configuration in NodeJS 2`] = `
Object {
  "collectCoverage": false,
  "collectCoverageFrom": Array [
    "**/*.{js,jsx}",
    "!**/node_modules/**",
    "!**/third-party/**",
  ],
  "coverageDirectory": "/example/results/JestUnitTests/NodeJS/coverage",
  "coverageReporters": Array [
    Array [
      "html",
      Object {
        "subdir": "coverage",
      },
    ],
  ],
  "maxWorkers": "50%",
  "projects": Array [
    Object {
      "automock": false,
      "cacheDirectory": "/example/results/cache/jest",
      "clearMocks": false,
      "displayName": "First_NodeJS",
      "errorOnDeprecated": false,
      "globals": Object {
        "__SABY_APPLICATION_DIRECTORY__": "/example/application",
        "__SABY_LOAD_CSS__": false,
      },
      "moduleDirectories": Array [
        "node_modules",
        "/example/application",
      ],
      "moduleNameMapper": Object {
        "react-dom": "/example/application/React/third-party/react-dom/react-dom.development.js",
        "react-dom/server": "/example/application/React/third-party/react-dom/server/react-dom-server.browser.development.js",
        "react-dom/test-utils": "/example/application/React/third-party/react-dom/test-utils/react-dom-test-utils.development.js",
      },
      "resetMocks": false,
      "resetModules": false,
      "restoreMocks": true,
      "rootDir": "/example/application",
      "roots": Array [
        "/example/application/First",
      ],
      "setupFilesAfterEnv": Array [
        "/example/node_modules/saby-units/lib/jest/setup-umd.js",
      ],
      "slowTestThreshold": 5,
      "snapshotResolver": "/example/results/JestUnitTests/NodeJS/snapshot-resolver.js",
      "testEnvironment": "node",
      "testEnvironmentOptions": Object {
        "contentType": "text/html",
        "includeNodeLocations": true,
        "pretendToBeVisual": true,
        "resources": "usable",
        "runScripts": "dangerously",
        "storageQuota": 10000000,
      },
      "testMatch": Array [
        "**/*.test.js",
      ],
      "testRunner": "/example/node_modules/saby-units/lib/jest/testRunner.js",
      "transform": Object {},
    },
    Object {
      "automock": false,
      "cacheDirectory": "/example/results/cache/jest",
      "clearMocks": false,
      "displayName": "Second_JSDOM",
      "errorOnDeprecated": false,
      "globals": Object {
        "__SABY_APPLICATION_DIRECTORY__": "/example/application",
        "__SABY_LOAD_CSS__": true,
      },
      "moduleDirectories": Array [
        "node_modules",
        "/example/application",
      ],
      "moduleNameMapper": Object {
        "react-dom": "/example/application/React/third-party/react-dom/react-dom.development.js",
        "react-dom/server": "/example/application/React/third-party/react-dom/server/react-dom-server.browser.development.js",
        "react-dom/test-utils": "/example/application/React/third-party/react-dom/test-utils/react-dom-test-utils.development.js",
      },
      "resetMocks": false,
      "resetModules": false,
      "restoreMocks": true,
      "rootDir": "/example/application",
      "roots": Array [
        "/example/application/Second",
      ],
      "setupFilesAfterEnv": Array [
        "/example/node_modules/saby-units/lib/jest/setup-umd.js",
      ],
      "slowTestThreshold": 5,
      "snapshotResolver": "/example/results/JestUnitTests/NodeJS/snapshot-resolver.js",
      "testEnvironment": "jsdom",
      "testEnvironmentOptions": Object {
        "contentType": "text/html",
        "includeNodeLocations": true,
        "pretendToBeVisual": true,
        "resources": "usable",
        "runScripts": "dangerously",
        "storageQuota": 10000000,
      },
      "testMatch": Array [
        "**/*.test.js",
      ],
      "testRunner": "/example/node_modules/saby-units/lib/jest/testRunner.js",
      "transform": Object {},
    },
  ],
  "reporters": Array [
    "default",
  ],
  "testFailureExitCode": 1,
  "testTimeout": 6000,
}
`;

exports[`Jest executor should return valid Jest configuration in NodeJS 3`] = `
Object {
  "envVariables": Object {},
  "jest": Object {
    "configPath": "/example/results/JestUnitTests/NodeJS/jestConfig.json",
    "junitEnabled": false,
    "options": Object {
      "ci": true,
      "report": "console",
      "updateSnapshot": undefined,
    },
    "root": "/example/application",
  },
}
`;

exports[`Jest executor should use default coverage provider 1`] = `
"const SOURCE_MODULES = ['/example/repositories/FirstRep/source','/example/repositories/SecondRep/source'];
const BUILD_MODULES = ['/example/application/First','/example/application/Second'];

function resolvePath(src, dst, pathSnapshot) {
   const path = pathSnapshot.replace(/\\\\\\\\/gi, '/');

   for (let index = 0; index < src.length; ++index) {
      if (path.startsWith(src[index])) {
         return dst[index] + path.slice(src[index].length);
      }
   }

   return path;
}

// Resolve snapshot file.
// Example:
//    Input:   dist/src/__test__/Post.spec.js
//    Output:  src/__test__/__snapshot__/Post.spec.ts.snap
// @param {string} testPath Test file path.
// @param {string} snapshotExtension Snapshot extension to be used (default is .snap)
function resolveSnapshotPath(testPath, snapshotExtension) {
   return resolvePath(BUILD_MODULES, SOURCE_MODULES, testPath) + snapshotExtension;
}

// Resolve test file path.
// Example:
//    Input:   src/__test__/__snapshot__/Post.spec.ts.snap
//    Output:  dist/src/__test__/Post.spec.js
// @param {string} snapshotFilePath Snapshot file path.
// @param {string} snapshotExtension Snapshot extension to be used (default is .snap)
function resolveTestPath(snapshotFilePath, snapshotExtension) {
   return resolvePath(SOURCE_MODULES, BUILD_MODULES, snapshotFilePath).slice(0, -snapshotExtension.length);
}

// resolveTestPath(resolveSnapshotPath(testPathForConsistencyCheck)) === testPathForConsistencyCheck
const testPathForConsistencyCheck = '/example/application/First/Component/index.js';

module.exports = {
   resolveSnapshotPath: resolveSnapshotPath,
   resolveTestPath: resolveTestPath,
   testPathForConsistencyCheck: testPathForConsistencyCheck
};
"
`;

exports[`Jest executor should use default coverage provider 2`] = `
Object {
  "collectCoverage": true,
  "collectCoverageFrom": Array [
    "**/*.{js,jsx}",
    "!**/node_modules/**",
    "!**/third-party/**",
  ],
  "coverageDirectory": "/example/results/JestUnitTests/NodeJS/coverage",
  "coverageReporters": Array [
    Array [
      "html",
      Object {
        "subdir": "coverage",
      },
    ],
  ],
  "maxWorkers": "20%",
  "projects": Array [
    Object {
      "automock": false,
      "cacheDirectory": "/example/results/cache/jest",
      "clearMocks": false,
      "displayName": "First_NodeJS",
      "errorOnDeprecated": false,
      "globals": Object {
        "__SABY_APPLICATION_DIRECTORY__": "/example/application",
        "__SABY_LOAD_CSS__": false,
      },
      "moduleDirectories": Array [
        "node_modules",
        "/example/application",
      ],
      "moduleNameMapper": Object {
        "react-dom": "/example/application/React/third-party/react-dom/react-dom.development.js",
        "react-dom/server": "/example/application/React/third-party/react-dom/server/react-dom-server.browser.development.js",
        "react-dom/test-utils": "/example/application/React/third-party/react-dom/test-utils/react-dom-test-utils.development.js",
      },
      "resetMocks": false,
      "resetModules": false,
      "restoreMocks": true,
      "rootDir": "/example/application",
      "roots": Array [
        "/example/application/First",
      ],
      "setupFilesAfterEnv": Array [
        "/example/node_modules/saby-units/lib/jest/setup-umd.js",
      ],
      "slowTestThreshold": 5,
      "snapshotResolver": "/example/results/JestUnitTests/NodeJS/snapshot-resolver.js",
      "testEnvironment": "node",
      "testEnvironmentOptions": Object {
        "contentType": "text/html",
        "includeNodeLocations": true,
        "pretendToBeVisual": true,
        "resources": "usable",
        "runScripts": "dangerously",
        "storageQuota": 10000000,
      },
      "testMatch": Array [
        "**/*.test.js",
      ],
      "testRunner": "/example/node_modules/saby-units/lib/jest/testRunner.js",
      "transform": Object {},
    },
    Object {
      "automock": false,
      "cacheDirectory": "/example/results/cache/jest",
      "clearMocks": false,
      "displayName": "Second_JSDOM",
      "errorOnDeprecated": false,
      "globals": Object {
        "__SABY_APPLICATION_DIRECTORY__": "/example/application",
        "__SABY_LOAD_CSS__": true,
      },
      "moduleDirectories": Array [
        "node_modules",
        "/example/application",
      ],
      "moduleNameMapper": Object {
        "react-dom": "/example/application/React/third-party/react-dom/react-dom.development.js",
        "react-dom/server": "/example/application/React/third-party/react-dom/server/react-dom-server.browser.development.js",
        "react-dom/test-utils": "/example/application/React/third-party/react-dom/test-utils/react-dom-test-utils.development.js",
      },
      "resetMocks": false,
      "resetModules": false,
      "restoreMocks": true,
      "rootDir": "/example/application",
      "roots": Array [
        "/example/application/Second",
      ],
      "setupFilesAfterEnv": Array [
        "/example/node_modules/saby-units/lib/jest/setup-umd.js",
      ],
      "slowTestThreshold": 5,
      "snapshotResolver": "/example/results/JestUnitTests/NodeJS/snapshot-resolver.js",
      "testEnvironment": "jsdom",
      "testEnvironmentOptions": Object {
        "contentType": "text/html",
        "includeNodeLocations": true,
        "pretendToBeVisual": true,
        "resources": "usable",
        "runScripts": "dangerously",
        "storageQuota": 10000000,
      },
      "testMatch": Array [
        "**/*.test.js",
      ],
      "testRunner": "/example/node_modules/saby-units/lib/jest/testRunner.js",
      "transform": Object {},
    },
  ],
  "reporters": Array [
    "default",
    Array [
      "/example/node_modules/saby-units/lib/jest/reporter.js",
      Object {
        "ancestorSeparator": " › ",
        "classNameTemplate": ".{classname}",
        "includeConsoleOutput": "true",
        "outputFile": "/example/results/JestUnitTests/NodeJS/result/xunit-report.xml",
        "suiteName": "Jest Unit Tests",
        "suiteNameTemplate": " › {filepath}",
        "titleTemplate": "{title}",
      },
    ],
  ],
  "testFailureExitCode": 1,
  "testTimeout": 6000,
}
`;

exports[`Jest executor should use default coverage provider 3`] = `
Object {
  "envVariables": Object {},
  "jest": Object {
    "configPath": "/example/results/JestUnitTests/NodeJS/jestConfig.json",
    "junitEnabled": true,
    "options": Object {
      "ci": true,
      "coverage": true,
      "updateSnapshot": undefined,
    },
    "root": "/example/application",
  },
}
`;

exports[`Jest executor should use given coverage provider 1`] = `
"const SOURCE_MODULES = ['/example/repositories/FirstRep/source','/example/repositories/SecondRep/source'];
const BUILD_MODULES = ['/example/application/First','/example/application/Second'];

function resolvePath(src, dst, pathSnapshot) {
   const path = pathSnapshot.replace(/\\\\\\\\/gi, '/');

   for (let index = 0; index < src.length; ++index) {
      if (path.startsWith(src[index])) {
         return dst[index] + path.slice(src[index].length);
      }
   }

   return path;
}

// Resolve snapshot file.
// Example:
//    Input:   dist/src/__test__/Post.spec.js
//    Output:  src/__test__/__snapshot__/Post.spec.ts.snap
// @param {string} testPath Test file path.
// @param {string} snapshotExtension Snapshot extension to be used (default is .snap)
function resolveSnapshotPath(testPath, snapshotExtension) {
   return resolvePath(BUILD_MODULES, SOURCE_MODULES, testPath) + snapshotExtension;
}

// Resolve test file path.
// Example:
//    Input:   src/__test__/__snapshot__/Post.spec.ts.snap
//    Output:  dist/src/__test__/Post.spec.js
// @param {string} snapshotFilePath Snapshot file path.
// @param {string} snapshotExtension Snapshot extension to be used (default is .snap)
function resolveTestPath(snapshotFilePath, snapshotExtension) {
   return resolvePath(SOURCE_MODULES, BUILD_MODULES, snapshotFilePath).slice(0, -snapshotExtension.length);
}

// resolveTestPath(resolveSnapshotPath(testPathForConsistencyCheck)) === testPathForConsistencyCheck
const testPathForConsistencyCheck = '/example/application/First/Component/index.js';

module.exports = {
   resolveSnapshotPath: resolveSnapshotPath,
   resolveTestPath: resolveTestPath,
   testPathForConsistencyCheck: testPathForConsistencyCheck
};
"
`;

exports[`Jest executor should use given coverage provider 2`] = `
Object {
  "collectCoverage": true,
  "collectCoverageFrom": Array [
    "**/*.{js,jsx}",
    "!**/node_modules/**",
    "!**/third-party/**",
  ],
  "coverageDirectory": "/example/results/JestUnitTests/NodeJS/coverage",
  "coverageReporters": Array [
    Array [
      "json",
      Object {
        "file": "coverage-final.json",
      },
    ],
  ],
  "maxWorkers": "20%",
  "projects": Array [
    Object {
      "automock": false,
      "cacheDirectory": "/example/results/cache/jest",
      "clearMocks": false,
      "displayName": "First_NodeJS",
      "errorOnDeprecated": false,
      "globals": Object {
        "__SABY_APPLICATION_DIRECTORY__": "/example/application",
        "__SABY_LOAD_CSS__": false,
      },
      "moduleDirectories": Array [
        "node_modules",
        "/example/application",
      ],
      "moduleNameMapper": Object {
        "react-dom": "/example/application/React/third-party/react-dom/react-dom.development.js",
        "react-dom/server": "/example/application/React/third-party/react-dom/server/react-dom-server.browser.development.js",
        "react-dom/test-utils": "/example/application/React/third-party/react-dom/test-utils/react-dom-test-utils.development.js",
      },
      "resetMocks": false,
      "resetModules": false,
      "restoreMocks": true,
      "rootDir": "/example/application",
      "roots": Array [
        "/example/application/First",
      ],
      "setupFilesAfterEnv": Array [
        "/example/node_modules/saby-units/lib/jest/setup-umd.js",
      ],
      "slowTestThreshold": 5,
      "snapshotResolver": "/example/results/JestUnitTests/NodeJS/snapshot-resolver.js",
      "testEnvironment": "node",
      "testEnvironmentOptions": Object {
        "contentType": "text/html",
        "includeNodeLocations": true,
        "pretendToBeVisual": true,
        "resources": "usable",
        "runScripts": "dangerously",
        "storageQuota": 10000000,
      },
      "testMatch": Array [
        "**/*.test.js",
      ],
      "testRunner": "/example/node_modules/saby-units/lib/jest/testRunner.js",
      "transform": Object {},
    },
    Object {
      "automock": false,
      "cacheDirectory": "/example/results/cache/jest",
      "clearMocks": false,
      "displayName": "Second_JSDOM",
      "errorOnDeprecated": false,
      "globals": Object {
        "__SABY_APPLICATION_DIRECTORY__": "/example/application",
        "__SABY_LOAD_CSS__": true,
      },
      "moduleDirectories": Array [
        "node_modules",
        "/example/application",
      ],
      "moduleNameMapper": Object {
        "react-dom": "/example/application/React/third-party/react-dom/react-dom.development.js",
        "react-dom/server": "/example/application/React/third-party/react-dom/server/react-dom-server.browser.development.js",
        "react-dom/test-utils": "/example/application/React/third-party/react-dom/test-utils/react-dom-test-utils.development.js",
      },
      "resetMocks": false,
      "resetModules": false,
      "restoreMocks": true,
      "rootDir": "/example/application",
      "roots": Array [
        "/example/application/Second",
      ],
      "setupFilesAfterEnv": Array [
        "/example/node_modules/saby-units/lib/jest/setup-umd.js",
      ],
      "slowTestThreshold": 5,
      "snapshotResolver": "/example/results/JestUnitTests/NodeJS/snapshot-resolver.js",
      "testEnvironment": "jsdom",
      "testEnvironmentOptions": Object {
        "contentType": "text/html",
        "includeNodeLocations": true,
        "pretendToBeVisual": true,
        "resources": "usable",
        "runScripts": "dangerously",
        "storageQuota": 10000000,
      },
      "testMatch": Array [
        "**/*.test.js",
      ],
      "testRunner": "/example/node_modules/saby-units/lib/jest/testRunner.js",
      "transform": Object {},
    },
  ],
  "reporters": Array [
    "default",
    Array [
      "/example/node_modules/saby-units/lib/jest/reporter.js",
      Object {
        "ancestorSeparator": " › ",
        "classNameTemplate": ".{classname}",
        "includeConsoleOutput": "true",
        "outputFile": "/example/results/JestUnitTests/NodeJS/result/xunit-report.xml",
        "suiteName": "Jest Unit Tests",
        "suiteNameTemplate": " › {filepath}",
        "titleTemplate": "{title}",
      },
    ],
  ],
  "testFailureExitCode": 1,
  "testTimeout": 6000,
}
`;

exports[`Jest executor should use given coverage provider 3`] = `
Object {
  "envVariables": Object {},
  "jest": Object {
    "configPath": "/example/results/JestUnitTests/NodeJS/jestConfig.json",
    "junitEnabled": true,
    "options": Object {
      "ci": true,
      "coverage": "json",
      "updateSnapshot": undefined,
    },
    "root": "/example/application",
  },
}
`;
